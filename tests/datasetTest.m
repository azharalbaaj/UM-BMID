% Tyson Reimer
% University of Manitoba
% October 16th, 2019

%% Define vars

clear all;
close all;
clc;

% Define the dataset directory
masterDir = 'datasets/';

dataGens = {'one'; 'two'};  % The two generations of dataset

dataTypes = {'clean'; 'raw'};  % The two types of subfolders

% The names of the expected clean data files
cleanNames = {{'fd_data_s11_adi.mat', ...
                    'fd_data_s11_adi.pickle', ...
                    'idft_data_s11_adi.mat', ...
                    'idft_data_s11_adi.pickle', ...
                    'iczt_data_s11_adi.mat', ...
                    'iczt_data_s11_adi.pickle', ...
                    'md_list_s11_adi.pickle', ...
                    'fd_data_s11_emp.mat', ...
                    'fd_data_s11_emp.pickle', ...
                    'idft_data_s11_emp.mat', ...
                    'idft_data_s11_emp.pickle', ...
                    'iczt_data_s11_emp.mat', ...
                    'iczt_data_s11_emp.pickle', ...
                    'md_list_s11_emp.pickle'}, ...
                {'fd_data_s11_adi.mat', ...
                    'fd_data_s11_adi.pickle', ...
                    'idft_data_s11_adi.mat', ...
                    'idft_data_s11_adi.pickle', ...
                    'iczt_data_s11_adi.mat', ...
                    'iczt_data_s11_adi.pickle', ...
                    'fd_data_s21_adi.mat', ...
                    'fd_data_s21_adi.pickle', ...
                    'idft_data_s21_adi.mat', ...
                    'idft_data_s21_adi.pickle', ...
                    'iczt_data_s21_adi.mat', ...
                    'iczt_data_s21_adi.pickle', ...
                    'md_list_s11_adi.pickle', ...
                    'fd_data_s11_emp.mat', ...
                    'fd_data_s11_emp.pickle', ...
                    'idft_data_s11_emp.mat', ...
                    'idft_data_s11_emp.pickle', ...
                    'iczt_data_s11_emp.mat', ...
                    'iczt_data_s11_emp.pickle', ...
                    'fd_data_s21_emp.mat', ...
                    'fd_data_s21_emp.pickle', ...
                    'idft_data_s21_emp.mat', ...
                    'idft_data_s21_emp.pickle', ...
                    'iczt_data_s21_emp.mat', ...
                    'iczt_data_s21_emp.pickle', ...
                    'md_list_s11_emp.pickle'}};
                
%% Look for folders and files

nFoldersHere = 0;  % The number of folders found here

fprintf('Beginning...Data verification...\n\n')

for genIdx = 1 : length(dataGens)  % For each data generation
    
    % Get the directory for this dataset generation
    thisDir = sprintf('gen-%s/', dataGens{genIdx});
    
    % Check if this directory exists
    dirExists = exist(fullfile(masterDir, thisDir));
    
    if dirExists == 7  % If it does exist
        
        fprintf('\tSuccess. /%s exists.\n', thisDir);
        
        % For raw/clean data folders
        for typeIdx = 1 : length(dataTypes)
            
            % Check if these subfolders exist
            subDirExists = exist(fullfile(masterDir, thisDir, ...
                                            dataTypes{typeIdx}));
                                        
            if subDirExists == 7  % If the subfolder exists
                
                fprintf('\tSuccess. /%s%s/ exists.\n', ...
                            thisDir, dataTypes{typeIdx});
                        
                nFoldersHere = nFoldersHere + 1;  % Increment counter
                
            else 
            
            % If sub-folder does not exist
                fprintf('\tFAILURE: folder /%s%s/ does not exist.\n',...
                            thisDir, dataTypes{typeIdx});
            end      
        end
    else  
    % If the generation folder does not exist
        fprintf('\tFAILURE: folder /%s does not exist.\n', ...
                        thisDir);
    end
end

if nFoldersHere == 4  % If all folders were found
    fprintf('Sucess! All folders exist..\n\n');
end

fprintf('Verifying clean data files...\n\n');

for genIdx = 1 : length(dataGens)  % For each generation
    
    % Get the path to the clean data for this gen
    thisDir = sprintf('gen-%s/', dataGens{genIdx});
    thisDir = fullfile(thisDir, 'clean');
    
    % Get the names of the files that should exist
    theseCleanNames = cleanNames{genIdx};
    
    % For each of the clean file names
    for cleanIdx = 1 : length(theseCleanNames)

        % Get the path to this file
        filePath = fullfile(thisDir, theseCleanNames{cleanIdx});
        
        fileExists = exist(filePath);  % Check if file exists

        if fileExists == 2  % If the file does exist
            
            fprintf('\tSuccess! %s exists.\n', filePath);
            
        else  
        % If the file does not exist
            fprintf('\tFAILURE: %s does not exist.\n', filePath);
        end 
    end
end



